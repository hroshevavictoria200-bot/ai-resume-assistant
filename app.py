import streamlit as st
import google.generativeai as genai
import fitz  # PyMuPDF
from docx import Document

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API-–∫–ª—é—á–∞ –∑ Streamlit secrets
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except KeyError:
    st.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á Google Gemini API. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É —Ñ–∞–π–ª secrets.toml.")
    st.stop()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
model = genai.GenerativeModel('gemini-pro')

st.set_page_config(page_title="AI –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –í–∞–∫–∞–Ω—Å—ñ–π", layout="wide")

st.title("AI –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∞–∫–∞–Ω—Å—ñ–π")
st.subheader("–ú–∏—Ç—Ç—î–≤–æ –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ —Å–≤–æ—î —Ä–µ–∑—é–º–µ –ø—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–∞–∫–∞–Ω—Å—ñ—é.")

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ —Ñ–∞–π–ª—ñ–≤ ---
def extract_text_from_file(file_path, file_type):
    """
    –í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É (PDF, DOCX, TXT).
    """
    text = ""
    if file_type == "application/pdf":
        try:
            pdf_document = fitz.open(stream=file_path.read(), filetype="pdf")
            for page in pdf_document:
                text += page.get_text()
            pdf_document.close()
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ PDF: {e}")
    elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        try:
            doc = Document(file_path)
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ DOCX: {e}")
    elif file_type == "text/plain":
        try:
            text = file_path.getvalue().decode("utf-8")
        except Exception as e:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ TXT: {e}")
    return text

# --- –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–∏ ---
tab_resume, tab_cover_letter, tab_interview, tab_skills = st.tabs([
    "üìù –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—é–º–µ",
    "‚úâÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç",
    "‚ùì –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏",
    "üéØ –°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏"
])

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—é–º–µ" ---
with tab_resume:
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î —ó—Ö —ñ –Ω–∞–¥–∞—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.")
    job_posting = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=250, help="–°–∫–æ–ø—ñ—é–π—Ç–µ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –ø–æ–≤–Ω—ñ—Å—Ç—é.", key="job_resume")
    
    st.markdown("---")
    resume_file = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], help="–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, DOCX –∞–±–æ TXT.", key="resume_file_resume_tab")
    
    analyze_button = st.button("üöÄ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—é–º–µ")

    if analyze_button:
        if not job_posting:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ–ª–µ –≤–∞–∫–∞–Ω—Å—ñ—ó.")
        elif not resume_file:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ.")
        else:
            user_resume = extract_text_from_file(resume_file, resume_file.type)
            if not user_resume:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É.")
            else:
                prompt = f"""
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–∑—é–º–µ ...
                """
                with st.spinner("üß† AI –∞–Ω–∞–ª—ñ–∑—É—î..."):
                    try:
                        response = model.generate_content(prompt.replace("{job_posting}", job_posting).replace("{user_resume}", user_resume))
                        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        st.markdown(response.text)
                    except Exception as e:
                        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç" ---
with tab_cover_letter:
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó, –∞ –ø–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –∑–≥–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç.")
    
    company_name = st.text_input("üè¢ **–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:**", key="company_name_cl")
    job_posting_cl = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=200, key="job_cl")
    
    st.markdown("---")
    resume_file_cl = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_cl_tab")
    
    generate_cl_button = st.button("‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç")

    if generate_cl_button:
        if not job_posting_cl or not resume_file_cl or not company_name:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.")
        else:
            user_resume_cl = extract_text_from_file(resume_file_cl, resume_file_cl.type)
            if not user_resume_cl:
                 st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                cl_prompt = f"""
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ ...
                """
                with st.spinner("üß† AI —Å—Ç–≤–æ—Ä—é—î –ª–∏—Å—Ç..."):
                    try:
                        cl_response = model.generate_content(cl_prompt.replace("{company_name}", company_name).replace("{job_posting_cl}", job_posting_cl).replace("{user_resume_cl}", user_resume_cl))
                        st.success("‚úÖ –õ–∏—Å—Ç –≥–æ—Ç–æ–≤–∏–π!")
                        st.markdown(cl_response.text)
                    except Exception as e:
                        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏" ---
with tab_interview:
    st.markdown("### ‚ùì –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏")
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –∑–≥–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å, —è–∫—ñ –º–æ–∂—É—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ.")
    
    job_posting_int = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=200, key="job_interview")
    
    st.markdown("---")
    resume_file_int = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_int_tab")
    
    interview_button = st.button("‚ùì –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏")
    
    if interview_button:
        if not job_posting_int or not resume_file_int:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è.")
        else:
            user_resume_int = extract_text_from_file(resume_file_int, resume_file_int.type)
            if not user_resume_int:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                interview_prompt = f"""
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–∏—Ç–∞–Ω—å –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—É ...
                """
                with st.spinner("üß† AI –≥–æ—Ç—É—î –ø–∏—Ç–∞–Ω–Ω—è..."):
                    try:
                        interview_response = model.generate_content(interview_prompt.replace("{job_posting_int}", job_posting_int).replace("{user_resume_int}", user_resume_int))
                        st.success("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç–æ–≤—ñ!")
                        st.markdown(interview_response.text)
                    except Exception as e:
                        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª—ñ–∑ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω" ---
with tab_skills:
    st.markdown("### üéØ –ê–Ω–∞–ª—ñ–∑ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω")
    st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ, —ñ AI –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ, —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ –≤–∞—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏.")

    resume_file_skills = st.file_uploader("üìù **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_skills_tab")
    
    skills_button = st.button("üîç –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏")
    
    if skills_button:
        if not resume_file_skills:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ.")
        else:
            user_resume_skills = extract_text_from_file(resume_file_skills, resume_file_skills.type)
            if not user_resume_skills:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                skills_prompt = f"""
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω ...
                """
                with st.spinner("üß† AI –∞–Ω–∞–ª—ñ–∑—É—î..."):
                    try:
                        skills_response = model.generate_content(skills_prompt.replace("{user_resume_skills}", user_resume_skills))
                        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        st.markdown(skills_response.text)
                    except Exception as e:
                        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ AI: {e}")