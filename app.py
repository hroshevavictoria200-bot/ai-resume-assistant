import streamlit as st
import openai
import fitz  # PyMuPDF
from docx import Document

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API-–∫–ª—é—á–∞ OpenAI –∑ Streamlit secrets
try:
    openai.api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á OpenAI API. –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ —É —Ñ–∞–π–ª secrets.toml.")
    st.stop()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ —Ñ–∞–π–ª—ñ–≤ ---
def extract_text_from_file(uploaded_file):
    """
    –í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É (PDF, DOCX, TXT).
    """
    file_type = uploaded_file.type
    text = ""
    try:
        if file_type == "application/pdf":
            pdf_document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
            for page in pdf_document:
                text += page.get_text()
            pdf_document.close()
        elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = Document(uploaded_file)
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
        elif file_type == "text/plain":
            text = uploaded_file.getvalue().decode("utf-8")
        else:
            st.error(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø —Ñ–∞–π–ª—É: {file_type}")
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
    return text

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–ª–∏–∫—É API OpenAI ---
def call_openai_api(prompt):
    """
    –í–∏–∫–ª–∏–∫–∞—î OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É.
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –í–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ "gpt-4" —è–∫—â–æ —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∞–∫–∞–Ω—Å—ñ–π —Ç–∞ —Ä–µ–∑—é–º–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
        )
        return response.choices[0].message['content']
    except openai.error.OpenAIError as e:
        st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI API: {e}")
        return None

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
st.set_page_config(page_title="AI –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –í–∞–∫–∞–Ω—Å—ñ–π", layout="wide")
st.title("AI –ê—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∞–∫–∞–Ω—Å—ñ–π")
st.subheader("–ú–∏—Ç—Ç—î–≤–æ –æ–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ —Å–≤–æ—î —Ä–µ–∑—é–º–µ –ø—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≤–∞–∫–∞–Ω—Å—ñ—é.")

# --- –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –≤–∫–ª–∞–¥–∫–∏ ---
tab_resume, tab_cover_letter, tab_interview, tab_skills = st.tabs([
    "üìù –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—é–º–µ",
    "‚úâÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç",
    "‚ùì –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏",
    "üéØ –°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏"
])

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—é–º–µ" ---
with tab_resume:
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î —ó—Ö —ñ –Ω–∞–¥–∞—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.")
    job_posting = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=250, help="–°–∫–æ–ø—ñ—é–π—Ç–µ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –ø–æ–≤–Ω—ñ—Å—Ç—é.", key="job_resume")
    
    st.markdown("---")
    resume_file = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], help="–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF, DOCX –∞–±–æ TXT.", key="resume_file_resume_tab")
    
    analyze_button = st.button("üöÄ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Ä–µ–∑—é–º–µ")

    if analyze_button:
        if not job_posting or not resume_file:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è.")
        else:
            user_resume = extract_text_from_file(resume_file)
            if not user_resume:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ñ–∞–π–ª.")
            else:
                prompt = f"""
                –¢–∏ ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –∞–Ω–∞–ª—ñ–∑—ñ –≤–∞–∫–∞–Ω—Å—ñ–π —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ —Ä–µ–∑—é–º–µ.
                –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π —Ç–∞ –∫–æ—Ä–∏—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑.

                **–ö—Ä–æ–∫ 1: –ê–Ω–∞–ª—ñ–∑ –í–∞–∫–∞–Ω—Å—ñ—ó**
                –í–∏–¥—ñ–ª–∏ –∫–ª—é—á–æ–≤—ñ –≤–∏–º–æ–≥–∏, –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–≤–∏—á–∫–∏, –¥–æ—Å–≤—ñ–¥ —Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, –ø–µ—Ä–µ–ª—ñ—á–µ–Ω—ñ —É –≤–∞–∫–∞–Ω—Å—ñ—ó.

                **–ö—Ä–æ–∫ 2: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –†–µ–∑—é–º–µ**
                –ü–æ—Ä—ñ–≤–Ω—è–π –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –¥–æ—Å–≤—ñ–¥, –∑–∞–∑–Ω–∞—á–µ–Ω—ñ —É –Ω–∞–¥–∞–Ω–æ–º—É —Ä–µ–∑—é–º–µ, –∑ –≤–∏–º–æ–≥–∞–º–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó.

                **–ö—Ä–æ–∫ 3: –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π**
                –ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É, —Å—Ç–≤–æ—Ä–∏ —Ç—Ä–∏ —Ä–æ–∑–¥—ñ–ª–∏:
                
                ### üü¢ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∑—é–º–µ
                * –ü–µ—Ä–µ–ª—ñ—á–∏ –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –¥–æ—Å–≤—ñ–¥ —ñ–∑ —Ä–µ–∑—é–º–µ, —è–∫—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ –≤–∏–º–æ–≥–∞–º–∏ –≤–∞–∫–∞–Ω—Å—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–ø–∏—Å–∫–∏.

                ### üî¥ –ü—Ä–æ–≥–∞–ª–∏–Ω–∏ –≤ –Ω–∞–≤–∏—á–∫–∞—Ö
                * –ü–µ—Ä–µ–ª—ñ—á–∏ –Ω–∞–≤–∏—á–∫–∏, —è–∫—ñ –≤–∫–∞–∑–∞–Ω—ñ —É –≤–∞–∫–∞–Ω—Å—ñ—ó, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —Ä–µ–∑—é–º–µ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–ø–∏—Å–∫–∏.

                ### üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ
                * –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π, —è–∫ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ –∞–±–æ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–µ–∑—é–º–µ, —â–æ–± –≤–æ–Ω–æ –∫—Ä–∞—â–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª–æ –≤–∞–∫–∞–Ω—Å—ñ—ó.
                * –í–∫–∞–∂–∏, —è–∫—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –≤–∞–∫–∞–Ω—Å—ñ—ó –≤–∞—Ä—Ç–æ –¥–æ–¥–∞—Ç–∏.
                * –ó–∞–ø—Ä–æ–ø–æ–Ω—É–π, —è–∫ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥, —â–æ–± –≤—ñ–Ω –∑–≤—É—á–∞–≤ –±—ñ–ª—å—à —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ.

                ---

                **–í–ê–ö–ê–ù–°–Ü–Ø:**
                {job_posting}

                **–†–ï–ó–Æ–ú–ï:**
                {user_resume}
                """
                with st.spinner("üß† AI –∞–Ω–∞–ª—ñ–∑—É—î..."):
                    response_text = call_openai_api(prompt)
                    if response_text:
                        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        st.markdown(response_text)

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç" ---
with tab_cover_letter:
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó, –∞ –ø–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –∑–≥–µ–Ω–µ—Ä—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç.")
    company_name = st.text_input("üè¢ **–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:**", key="company_name_cl")
    job_posting_cl = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=200, key="job_cl")
    
    st.markdown("---")
    resume_file_cl = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_cl_tab")
    
    generate_cl_button = st.button("‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç")

    if generate_cl_button:
        if not job_posting_cl or not resume_file_cl or not company_name:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è.")
        else:
            user_resume_cl = extract_text_from_file(resume_file_cl)
            if not user_resume_cl:
                 st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                cl_prompt = f"""
                –¢–∏ ‚Äî –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏—Ö –ª–∏—Å—Ç—ñ–≤.
                –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–∫–æ–Ω–ª–∏–≤–∏–π —Å—É–ø—Ä–æ–≤—ñ–¥–Ω–∏–π –ª–∏—Å—Ç, —è–∫–∏–π —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∞–∫–∞–Ω—Å—ñ—ó, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –¥–æ—Å–≤—ñ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç ...
                """
                with st.spinner("üß† AI —Å—Ç–≤–æ—Ä—é—î –ª–∏—Å—Ç..."):
                    response_text = call_openai_api(cl_prompt)
                    if response_text:
                        st.success("‚úÖ –õ–∏—Å—Ç –≥–æ—Ç–æ–≤–∏–π!")
                        st.markdown(response_text)

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏" ---
with tab_interview:
    st.markdown("### ‚ùì –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏")
    st.info("–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ä–µ–∑—é–º–µ. AI –∑–≥–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–∞–Ω—å, —è–∫—ñ –º–æ–∂—É—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ.")
    job_posting_int = st.text_area("üìÑ **–í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å—ñ—ó:**", height=200, key="job_interview")
    
    st.markdown("---")
    resume_file_int = st.file_uploader("üìù **–ê–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_int_tab")
    
    interview_button = st.button("‚ùì –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏")
    
    if interview_button:
        if not job_posting_int or not resume_file_int:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–∏–¥–≤–∞ –ø–æ–ª—è.")
        else:
            user_resume_int = extract_text_from_file(resume_file_int)
            if not user_resume_int:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                interview_prompt = f"""
                –¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –¥–ª—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏, 
                –≤–∏—Ö–æ–¥—è—á–∏ –∑ –Ω–∞–¥–∞–Ω–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç ...
                """
                with st.spinner("üß† AI –≥–æ—Ç—É—î –ø–∏—Ç–∞–Ω–Ω—è..."):
                    response_text = call_openai_api(interview_prompt)
                    if response_text:
                        st.success("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –≥–æ—Ç–æ–≤—ñ!")
                        st.markdown(response_text)

# --- –õ–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ê–Ω–∞–ª—ñ–∑ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω" ---
with tab_skills:
    st.markdown("### üéØ –ê–Ω–∞–ª—ñ–∑ —Å–∏–ª—å–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω")
    st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ, —ñ AI –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –π–æ–≥–æ, —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ –≤–∞—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏.")
    resume_file_skills = st.file_uploader("üìù **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ:**", type=["pdf", "docx", "txt"], key="resume_file_skills_tab")
    
    skills_button = st.button("üîç –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏")
    
    if skills_button:
        if not resume_file_skills:
            st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ.")
        else:
            user_resume_skills = extract_text_from_file(resume_file_skills)
            if not user_resume_skills:
                st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ —Ç–µ–∫—Å—Ç –∑ —Ñ–∞–π–ª—É.")
            else:
                skills_prompt = f"""
                –¢–∏ ‚Äî –∫–∞—Ä'—î—Ä–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —ñ –≤–∏–¥—ñ–ª–∏—Ç–∏ –π–æ–≥–æ –∫–ª—é—á–æ–≤—ñ —Å–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏, 
                –≤–∏—Ö–æ–¥—è—á–∏ –∑ –¥–æ—Å–≤—ñ–¥—É —Ç–∞ –Ω–∞–≤–∏—á–æ–∫.
                ... –≤–∞—à –ø—Ä–æ–º–ø—Ç ...
                """
                with st.spinner("üß† AI –∞–Ω–∞–ª—ñ–∑—É—î..."):
                    response_text = call_openai_api(skills_prompt)
                    if response_text:
                        st.success("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        st.markdown(response_text)